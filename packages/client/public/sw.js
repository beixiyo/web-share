self.addEventListener("install",(e=>{console.log("StreamDownloader SW installed"),e.waitUntil(self.skipWaiting())})),self.addEventListener("activate",(e=>{console.log("StreamDownloader SW activated"),e.waitUntil(self.clients.claim())}));const e=new Map;self.addEventListener("message",(t=>{const{filename:n,downloadId:a}=t.data,s=t.ports[0],o=`${self.registration.scope}jl-org-download/${a}/${n}`,l=new ReadableStream({start(t){function n(n){t.error(n),t.close(),e.delete(url)}s.onmessage=e=>{const a=e.data;"end"===a?t.close():"abort"===a?n("Download aborted"):t.enqueue(a)},s.onmessageerror=()=>{n("Channel error")}}});e.set(o,{stream:l,filename:n}),s.postMessage({downloadUrl:o})})),self.addEventListener("fetch",(t=>{const n=t.request.url;if(!e.has(n))return;const a=e.get(n);if(a){e.delete(n);const s=new Headers({"Content-Type":"application/octet-stream","Content-Disposition":`attachment; filename="${a.filename}"`});t.respondWith(new Response(a.stream,{headers:s}))}}));