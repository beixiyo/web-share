self.addEventListener("install",(e=>{console.log("StreamDownloader SW installed"),e.waitUntil(self.skipWaiting())})),self.addEventListener("activate",(e=>{console.log("StreamDownloader SW activated"),e.waitUntil(self.clients.claim())}));const e=new Map;self.addEventListener("message",(t=>{const n=t.data,a=t.ports[0],s=`${self.registration.scope}jl-org-download/${n.downloadId}/${n.filename}`,o=new ReadableStream({start(t){function n(n){t.error(n),t.close(),e.delete(s)}a.onmessage=e=>{const a=e.data;"end"===a?t.close():"abort"===a?n("Download aborted"):t.enqueue(a)},a.onmessageerror=()=>{n("Channel error")}}});e.set(s,{stream:o,data:n}),a.postMessage({downloadUrl:s})})),self.addEventListener("fetch",(t=>{const n=t.request.url;if(!e.has(n))return;const a=e.get(n);if(a){e.delete(n);const{data:s}=a,o={"Content-Type":s.mimeType,"Content-Disposition":`attachment; filename="${s.filename}"`};s.contentLength&&(o["Content-Length"]=s.contentLength);const l=new Headers(o);t.respondWith(new Response(a.stream,{headers:l}))}}));
